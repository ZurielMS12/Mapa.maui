# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: "windows-latest"

variables:
  buildConfiguration: 'Release'
  project: 'PruebaMAUI/Mapa.maui/Mapa.maui.csproj' 

stages:
  - stage: Compilacion_Android
    displayName: 'Compilacion proyecto Android'
    jobs:
      - job: ValidationJob
        displayName: Validaci√≥n Android
        pool: server    
        timeoutInMinutes: 4320 # job times out in 3 days
        steps: 
        - task: ManualValidation@0
          timeoutInMinutes: 1440 # task times out in 1 day
          inputs:
              notifyUsers: |
                  marlo15.9909@outlook.com
                  marianazacariaschavez@hotmail.com
              instructions: 'Validar el trabajo y realizar el resumen del mismo'
              onTimeout: 'resume'      
      - job: Job_CI_Android
        displayName: 'Compilacion Android'
        continueOnError: false
        dependsOn: ValidationJob
        steps:

        - task: UseDotNet@2
          displayName: 'Use .NET Core sdk 6.0.x'
          inputs:
            version: 6.0.x
            includePreviewVersions: true

        - task: NuGetToolInstaller@0
          displayName: 'Use NuGet 6.x'
          inputs:
            versionSpec: 6.x
            checkLatest: true

        - task: NuGetCommand@2
          displayName: 'NuGet restore'
          inputs:
            restoreSolution: '$(Parameters.restorePkgSolution)'
            vstsFeed: 'af2e86fe-2cee-437d-9bab-6fb66e7a5fd2'

        - task: XamarinAndroid@1
          displayName: 'Build Maui.Android project PruebaMAUI/Deployment.Mapa/Deployment.Mapa.Android/Deployment.Mapa.Android.csproj'
          inputs:
            projectFile: PruebaMAUI/Deployment.Mapa/Deployment.Mapa.Android/Deployment.Mapa.Android.csproj
            outputDirectory: '$(build.binariesdirectory)/$(BuildConfiguration)'
            configuration: '$(BuildConfiguration)'
            clean: true

        - task: AndroidSigning@3
          displayName: 'Signing and aligning APK file(s) $(build.binariesdirectory)/$(BuildConfiguration)/*.apk'
          inputs:
            apkFiles: '$(Parameters.appFiles)'
            apksignerKeystoreFile: general.keystore
            apksignerKeystorePassword: general
            apksignerKeystoreAlias: general
            apksignerKeyPassword: general

        - task: PublishBuildArtifacts@1
          displayName: 'Publish Artifact: drop'
          inputs:
            PathtoPublish: '$(build.binariesdirectory)/$(BuildConfiguration)'
          condition: succeededOrFailed()
          
        - task: NuGetCommand@2
          displayName: 'NuGet restore'
          inputs:
            restoreSolution: '$(Parameters.restorePkgSolution)'
            vstsFeed: 'af2e86fe-2cee-437d-9bab-6fb66e7a5fd2'
          
          #- task: NuGetToolInstaller@1
           # displayName: 'Restore NuGet Packages'
            #inputs:
             # versionSpec: 6.0.x
          
          #- task: NuGetCommand@2
           # inputs:
            #  command: 'restore'
             # solution: $(project)
              #includeNuGetOrg: true
              #feedsToUse: 'select'
              #vstsFeed: 'af2e86fe-2cee-437d-9bab-6fb66e7a5fd2'
             # noCache: true
          #- task: DotNetCoreCLI@2
           # inputs:
            #  command: 'restore'
             # projects: '*.sln'
             # feedsToUse: 'select'
             # vstsFeed: 'af2e86fe-2cee-437d-9bab-6fb66e7a5fd2'
             # noCache: true
          
         # - task: AndroidSigning@2
         #   inputs:
         #     apkFiles: '**/*.apk'

        #- task: CopyFiles@2
        #    inputs:
        #      contents: '**/*.apk'
        #      targetFolder: '$(build.artifactStagingDirectory)'
          
        #  - task: PublishBuildArtifacts@1